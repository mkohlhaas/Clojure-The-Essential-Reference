(def max-iterations 99) ; <1>

(defn calc-mandelbrot [c-re c-im] ; <2>
  (let [sq    (fn [x] (* x x))
        iter  (reduce (fn [[z-re z-im] i]
                        (if (or (= i 99) (> (+ (sq z-re) (sq z-im)) 4))
                          (reduced i)
                          [(+ c-re (sq z-re) (- (sq z-im)))
                           (+ c-im (* 2 z-re z-im))]))
                      [0 0] (range (inc max-iterations)))]
        (vector-of :double c-re c-im iter))) ; <3>

(def mandelbrot-set ; <4>
  (for [im (range 1 -1 -0.05) re (range -2 0.5 0.0315)]
    (calc-mandelbrot re im)))

(doseq [row (partition 80 mandelbrot-set)] ; <5>
  (doseq [point row]
    (print (if (> max-iterations (get point 2)) "*" " ")))
  (println))

;; **************************************************************************
;; ******************************************************** *****************
;; *****************************************************     ****************
;; ****************************************************       ***************
;; *****************************************************      ***************
;; **************************************************  *     ** *************
;; *******************************************  ***                **********
;; ******************************************                        **  ****
;; *******************************************                           ****
;; *****************************************                            *****
;; ****************************************                              ****
;; **************************************                                   *
;; **************************** *********                                  **
;; ***********************  *     * *****                                  **
;; ***********************           ***                                   **
;; *********************              *                                    **
;; *********************                                                   **
;; *****************                                                     ****
;; ***  *****                                                          ******
;; *****************                                                     ****
;; *********************                                                   **
;; *********************              *                                    **
;; ***********************           ***                                   **
;; ***********************  *     * *****                                  **
;; **************************** *********                                  **
;; **************************************                                   *
;; ****************************************                              ****
;; *****************************************                            *****
;; *******************************************                           ****
;; ******************************************                        **  ****
;; *******************************************  ***                **********
;; **************************************************  *     ** *************
;; *****************************************************      ***************
;; ****************************************************       ***************
;; *****************************************************     ****************
;; ******************************************************** *****************
;; **************************************************************************